- job-template:
    name: '{value_stream}_{name}_unit-clj_{qualifier}'
    meta_path_jobtemplate: 'resources/jobs/unit-clj.yaml'
    display-name: '{name} ({scm_branch}){dn-sort-index} {dn-qualifier}'
    qualifier: '{scm_branch}'
    dn-qualifier: 'Clojure Unit Tests'
    node: worker
    project-type: matrix
    axes:
        - axis:
            type: dynamic
            name: JDK
            values:
                - JDK_AXIS
        - axis:
            type: slave
            name: label
            values:
                - unit
    builders:
        - shell:
            !include-raw unit-clj.sh
    publishers:
        - trigger-parameterized-builds:
            - project: '{obj:tpb_projects}'
              predefined-parameters: '{obj:tpb_predefined_parameters}'
              current-parameters: '{obj:tpb_current_parameters}'
              condition: '{obj:tpb_condition}'
              property-file: '{obj:tpb_property_file}'
              git-revision: '{obj:tpb_git_revision}'

- job-template:
    name: '{value_stream}_{name}_unit-clj_postgres-integration_{qualifier}'
    meta_path_jobtemplate: 'resources/jobs/unit-clj.yaml'
    display-name: '{name} ({scm_branch}){dn-sort-index} Clj/Postgres Unit/Integration Test'
    node: worker
    project-type: matrix
    axes:
        - axis:
            type: dynamic
            name: PUPPETDB_DBTYPE
            values:
                - PUPPETDB_DBTYPE_AXIS
        - axis:
            type: dynamic
            name: JDK
            values:
                - JDK_AXIS
        - axis:
            type: slave
            name: label
            values:
                - unit
    builders:
        - shell: |
            #!/usr/bin/env bash
            set -x
            set -e

            {additional_exports}

            source ~/jdk_switcher.sh
            jdk_switcher use $JDK

            export DBHOST=vasu.delivery.puppetlabs.net
            export DBUSER={pgdb_user}
            export DBPORT=5432

            echo
            echo "Set postgres password."
            export PGPASSWORD={pgdb_password}

            BUILD_ID=$BUILD_ID-$JDK-$PUPPETDB_DBTYPE

            echo
            echo "Create unique database names."
            CLASSIFIER_DB_ID=`echo "{name}_classifier_$BUILD_ID" | tr - _`
            RBAC_DB_ID=`echo "{name}_rbac_$BUILD_ID" | tr - _`
            ACTIVITY_DB_ID=`echo "{name}_activity_$BUILD_ID" | tr - _`
            REDROVER_DB_ID=`echo "{name}_redrover_$BUILD_ID" | tr - _`
            PUPPETDB_DB_ID=`echo "{name}_puppetdb_$BUILD_ID" | tr - _`

            export REDROVER_DBSUBNAME="//$DBHOST:$DBPORT/$REDROVER_DB_ID"
            export REDROVER_DBUSER="$DBUSER"
            export REDROVER_DBPASS="$PGPASSWORD"

            export CLASSIFIER_DBSUBNAME="//$DBHOST:$DBPORT/$CLASSIFIER_DB_ID"
            export CLASSIFIER_DBUSER="$DBUSER"
            export CLASSIFIER_DBPASS="$PGPASSWORD"

            export RBAC_DBNAME="//$DBHOST:$DBPORT/$RBAC_DB_ID"
            export RBAC_DBUSER="rbac"
            export RBAC_DBPASS="rbac851"

            export ACTIVITY_DBNAME="//$DBHOST:$DBPORT/$ACTIVITY_DB_ID"
            export ACTIVITY_DBUSER="$DBUSER"
            export ACTIVITY_DBPASS="$PGPASSWORD"

            export PUPPETDB_DBSUBNAME="//$DBHOST:$DBPORT/$RBAC_DB_ID"
            export PUPPETDB_DBUSER="$DBUSER"
            export PUPPETDB_DBPASSWORD="$PGPASSWORD"

            set +e # failing the script by exit code during this section will
                   # cause the database cleanup to not happen
                   #
            echo
            echo "Create temporary database names."
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "create database $REDROVER_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "create database $CLASSIFIER_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "create database $RBAC_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "create database $ACTIVITY_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "create database $PUPPETDB_DB_ID"

            echo
            echo "Running with DBUSER=rbac, do this special thing."
            env PGPASSWORD=$RBAC_DBPASS psql -h "$DBHOST" -U "$RBAC_DBUSER" -d "$RBAC_DB_ID" -c "create extension citext"

            if [ ! -z "$JDK_BIN_PATH" ] ;then
                export PATH="$JDK_BIN_PATH:$PATH"
            fi

            java -version

            echo
            echo "Run leiningen tests."
            lein version
            lein -U test :all
            RETVAL=$?

            echo
            echo "Clean up databases"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "drop database $REDROVER_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "drop database $CLASSIFIER_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "drop database $RBAC_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "drop database $ACTIVITY_DB_ID"
            psql -h "$DBHOST" -U "$DBUSER" -d postgres -c "drop database $PUPPETDB_DB_ID"

            exit $RETVAL # exit with the return code of the leiningen test run

    publishers:
        - trigger-parameterized-builds:
            - project: '{obj:tpb_projects}'
              predefined-parameters: '{obj:tpb_predefined_parameters}'
              current-parameters: '{obj:tpb_current_parameters}'
              condition: '{obj:tpb_condition}'
              property-file: '{obj:tpb_property_file}'
              git-revision: '{obj:tpb_git_revision}'

- job-template:
    name: '{value_stream}_{name}_unit-clj_directory-services_{qualifier}'
    meta_path_jobtemplate: 'resources/jobs/unit-clj.yaml'
    display-name: '{name} ({scm_branch}){dn-sort-index} {dn-qualifier} Test'
    qualifier: '{scm_branch}'
    node: worker
    project-type: matrix
    axes:
        - axis:
            type: dynamic
            name: JDK
            values:
                - JDK_AXIS
        - axis:
            type: slave
            name: label
            values:
                - unit
    builders:
        - shell:
            !include-raw unit-clj-directory-services.sh
    publishers:
        - trigger-parameterized-builds:
            - project: '{obj:tpb_projects}'
              predefined-parameters: '{obj:tpb_predefined_parameters}'
              current-parameters: '{obj:tpb_current_parameters}'
              condition: '{obj:tpb_condition}'
              property-file: '{obj:tpb_property_file}'
              git-revision: '{obj:tpb_git_revision}'
